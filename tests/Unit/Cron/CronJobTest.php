<?php

declare(strict_types=1);

namespace Tests\Unit\Cron;

use PHPUnit\Framework\TestCase;
use LengthOfRope\TreeHouse\Cron\CronJob;

/**
 * Test suite for CronJob base class
 */
class CronJobTest extends TestCase
{
    public function testJobConfiguration(): void
    {
        $job = new TestCronJobImpl();
        
        $this->assertEquals('test-job', $job->getName());
        $this->assertEquals('Test job implementation', $job->getDescription());
        $this->assertEquals('0 * * * *', $job->getSchedule());
        $this->assertTrue($job->isEnabled());
        $this->assertEquals(300, $job->getTimeout());
        $this->assertEquals(50, $job->getPriority());
        $this->assertFalse($job->allowsConcurrentExecution());
    }

    public function testExecution(): void
    {
        $job = new TestCronJobImpl();
        
        $this->assertTrue($job->execute());
        $this->assertTrue($job->wasExecuted());
    }

    public function testExecutionWithException(): void
    {
        $job = new FailingCronJobImpl();
        
        $this->assertFalse($job->execute());
    }

    public function testMetadata(): void
    {
        $job = new TestCronJobImpl();
        
        $metadata = $job->getMetadata();
        $this->assertIsArray($metadata);
        $this->assertEquals(TestCronJobImpl::class, $metadata['class']);
        $this->assertArrayHasKey('created_at', $metadata);
        $this->assertArrayHasKey('php_version', $metadata);
        $this->assertArrayHasKey('memory_limit', $metadata);
    }

    public function testMetadataWithCustomData(): void
    {
        $job = new JobWithCustomMetadata();
        
        $metadata = $job->getMetadata();
        $this->assertEquals('test', $metadata['environment']);
        $this->assertEquals('1.0', $metadata['version']);
    }

    public function testAutoGeneratedName(): void
    {
        $job = new AutoNamedCronJob();
        
        // Should auto-generate name from class name
        $this->assertEquals('auto-named-cron-job', $job->getName());
    }

    public function testPriorityValidation(): void
    {
        $job = new PriorityTestJob();
        
        // Test that priority is properly clamped
        $this->assertEquals(0, $job->getHighPriority()); // -10 should be clamped to 0
        $this->assertEquals(100, $job->getLowPriority()); // 150 should be clamped to 100
        $this->assertEquals(50, $job->getNormalPriority()); // 50 should remain 50
    }

    public function testConcurrentExecution(): void
    {
        $concurrentJob = new ConcurrentCronJob();
        $nonConcurrentJob = new TestCronJobImpl();
        
        $this->assertTrue($concurrentJob->allowsConcurrentExecution());
        $this->assertFalse($nonConcurrentJob->allowsConcurrentExecution());
    }

    public function testDisabledJob(): void
    {
        $job = new DisabledCronJob();
        
        $this->assertFalse($job->isEnabled());
    }

    public function testJobStringRepresentation(): void
    {
        $job = new TestCronJobImpl();
        
        // Test that job can be converted to string (implementation dependent)
        $string = (string) $job;
        $this->assertIsString($string);
        $this->assertNotEmpty($string);
    }

    public function testJobSchedules(): void
    {
        $hourlyJob = new HourlyCronJob();
        $dailyJob = new DailyCronJob();
        $weeklyJob = new WeeklyCronJob();
        
        $this->assertEquals('0 * * * *', $hourlyJob->getSchedule());
        $this->assertEquals('0 0 * * *', $dailyJob->getSchedule());
        $this->assertEquals('0 0 * * 0', $weeklyJob->getSchedule());
    }

    public function testTimeouts(): void
    {
        $shortJob = new ShortTimeoutJob();
        $longJob = new LongTimeoutJob();
        
        $this->assertEquals(60, $shortJob->getTimeout());
        $this->assertEquals(1800, $longJob->getTimeout());
    }

    public function testJobDescriptions(): void
    {
        $job = new TestCronJobImpl();
        $emptyDescJob = new EmptyDescriptionJob();
        
        $this->assertEquals('Test job implementation', $job->getDescription());
        $this->assertEquals('', $emptyDescJob->getDescription());
    }

    public function testLoggingIntegration(): void
    {
        $job = new LoggingTestCronJob();
        
        // Should not throw exceptions when logging
        $this->assertTrue($job->execute());
    }
}

// Test implementations

class TestCronJobImpl extends CronJob
{
    private bool $executed = false;

    public function __construct()
    {
        $this->setName('test-job')
            ->setDescription('Test job implementation')
            ->setSchedule('0 * * * *')
            ->setPriority(50)
            ->setTimeout(300);
    }

    public function handle(): bool
    {
        $this->executed = true;
        return true;
    }

    public function wasExecuted(): bool
    {
        return $this->executed;
    }
}

class FailingCronJobImpl extends CronJob
{
    public function __construct()
    {
        $this->setName('failing-job')
            ->setDescription('Job that always fails')
            ->setSchedule('* * * * *');
    }

    public function handle(): bool
    {
        throw new \Exception('This job always fails');
    }
}

class JobWithCustomMetadata extends CronJob
{
    public function __construct()
    {
        $this->setName('metadata-job')
            ->addMetadata('environment', 'test')
            ->addMetadata('version', '1.0');
    }

    public function handle(): bool
    {
        return true;
    }
}

class AutoNamedCronJob extends CronJob
{
    // No name set, should auto-generate from class name
    
    public function handle(): bool
    {
        return true;
    }
}

class PriorityTestJob extends CronJob
{
    public function __construct()
    {
        $this->setName('priority-test');
    }

    public function handle(): bool
    {
        return true;
    }

    public function getHighPriority(): int
    {
        $this->setPriority(-10); // Should be clamped to 0
        return $this->getPriority();
    }

    public function getLowPriority(): int
    {
        $this->setPriority(150); // Should be clamped to 100
        return $this->getPriority();
    }

    public function getNormalPriority(): int
    {
        $this->setPriority(50); // Should remain 50
        return $this->getPriority();
    }
}

class ConcurrentCronJob extends CronJob
{
    public function __construct()
    {
        $this->setName('concurrent-job')
            ->setAllowsConcurrentExecution(true);
    }

    public function handle(): bool
    {
        return true;
    }
}

class DisabledCronJob extends CronJob
{
    public function __construct()
    {
        $this->setName('disabled-job')
            ->setEnabled(false);
    }

    public function handle(): bool
    {
        return true;
    }
}

class HourlyCronJob extends CronJob
{
    public function __construct()
    {
        $this->setName('hourly-job')
            ->setSchedule('0 * * * *');
    }

    public function handle(): bool
    {
        return true;
    }
}

class DailyCronJob extends CronJob
{
    public function __construct()
    {
        $this->setName('daily-job')
            ->setSchedule('0 0 * * *');
    }

    public function handle(): bool
    {
        return true;
    }
}

class WeeklyCronJob extends CronJob
{
    public function __construct()
    {
        $this->setName('weekly-job')
            ->setSchedule('0 0 * * 0');
    }

    public function handle(): bool
    {
        return true;
    }
}

class ShortTimeoutJob extends CronJob
{
    public function __construct()
    {
        $this->setName('short-job')
            ->setTimeout(60);
    }

    public function handle(): bool
    {
        return true;
    }
}

class LongTimeoutJob extends CronJob
{
    public function __construct()
    {
        $this->setName('long-job')
            ->setTimeout(1800);
    }

    public function handle(): bool
    {
        return true;
    }
}

class EmptyDescriptionJob extends CronJob
{
    public function __construct()
    {
        $this->setName('empty-desc-job');
        // No description set
    }

    public function handle(): bool
    {
        return true;
    }
}

class LoggingTestCronJob extends CronJob
{
    public function __construct()
    {
        $this->setName('logging-job')
            ->setDescription('Job for testing logging')
            ->setSchedule('* * * * *');
    }

    public function handle(): bool
    {
        $this->logInfo('Info message', ['key' => 'value']);
        $this->logWarning('Warning message');
        $this->logError('Error message', ['error' => 'details']);
        return true;
    }
}